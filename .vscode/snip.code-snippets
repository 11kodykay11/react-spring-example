{
	// Place your next-note workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Import Snippet": {
		"scope": "javascript,typescript",
		"prefix": "imp",
		"body": [
			//snippet
			"import { $0 } from \"${1:package}\";"
		],
		"description": "Add new import statement"
	},

	"UseEffect": {
		"scope": "javascript,typescript",
		"prefix": "useEffect",
		"body": [
			//snippet
			"useEffect"
		],
		"description": "Add useEffect hook"
	},

	"Component": {
		//"scope": "javascript,typescript",
		"prefix": "comp",
		"body": [
			//snippet
			"import React, { useState, useEffect, useMemo } from \"react\";",
			"import { Card, Typography } from \"@material-ui/core\";",
			"import { makeStyles } from \"@material-ui/styles\";",
			"",
			"const useStyles = makeStyles({",
			"\tcard:{",
			"\t\talignItems:\"center\"",
			"\t}",
			"});",
			"",
			"const ${1:Component} = props => {",
			"\tconst classes = useStyles();",
			"",
			"\tuseEffect(() => {})",
			"",
			"\tconst comp = useMemo(() => {",
			"\t\treturn (",
			"\t\t\t<Card className={classes.card}>",
			"\t\t\t\t<Typography variant=\"body1\">Component</Typography>",
			"\t\t\t</Card>",
			"\t\t);",
			"\t}, []);",
			"",
			"\treturn comp;",
			"}"
		],
		"description": "React Hook Component"
	},

	"UseState": {
		// "scope": "javascript,typescript",
		"prefix": "useState",
		"body": [
			//snippet
			"const [${1:stateVariable}, ${2:setStateVariable}] = useState(null);"
		],
		"description": "Adds useState statement"
	},

	"Log": {
		"prefix": "clog",
		"body": ["console.log(`${TM_FILENAME_BASE/(.*)/${1:/upcase}/}: ${$1}`);"],
		"description": "Insert log statement"
	}
}
